  1) nums.sorted.slice(nums.length - 2, nums.length).reduce((a, b) => (a - 1) * (b - 1))
  2) salary
    .foldLeft((0, Int.MaxValue, Int.MinValue, 0)) {
      (memo, next) =>
        memo match {
          case (sum, min, max, count) =>
            (sum + next, math.min(next, min), math.max(next, max), count + 1)
        }
    } match {
    case (sum, min, max, count) => ((sum - min - max) / (count - 2).toDouble)
  }
  3) java
   String[] days = new String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
    public String dayOfTheWeek(int d, int m, int y) {
        if (m < 3) {
            m += 12;
            y -= 1;
        }
        int c = y / 100;
        y = y % 100;
        int w = (c / 4 - 2 * c + y + y / 4 + 13 * (m + 1) / 5 + d - 1) % 7;
        return days[(w + 7) % 7];
  4)
  if (k < 0) 
        0
    else if (k == 0)
        nums.groupBy(identity).count(_._2.length > 1)
    else {
        val s = nums.toSet
        s.count(n => s.contains(n + k))
    }


